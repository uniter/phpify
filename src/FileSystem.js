/*
 * PHPify - Browserify transform
 * Copyright (c) Dan Phillimore (asmblah)
 * https://github.com/uniter/phpify
 *
 * Released under the MIT license
 * https://github.com/uniter/phpify/raw/master/MIT-LICENSE.txt
 */

'use strict';

var _ = require('microdash'),
    path = require('path');

/**
 * Virtual FileSystem for use in the browser with compiled PHP modules
 *
 * @constructor
 */
function FileSystem() {
    /**
     * A special function, generated by the PHP module compiler,
     * that can be called to fetch the module wrapper of any compiled modules
     * or return true/false to determine whether they exist
     *
     * @type {Function|null}
     */
    this.phpModuleFactoryFetcher = null;
}

_.extend(FileSystem.prototype, {
    /**
     * Fetches the module wrapper factory function for a compiled PHP module,
     * if it exists in the compiled bundle
     *
     * @param {string} filePath
     * @returns {Function}
     * @throws {Error} Throws when the specified compiled module does not exist
     */
    compilePHPFile: function (filePath) {
        var fileSystem = this,
            moduleFactory;

        filePath = fileSystem.realPath(filePath);
        moduleFactory = fileSystem.phpModuleFactoryFetcher(filePath, false);

        if (moduleFactory === null) {
            throw new Error('File "' + filePath + '" is not in the compiled PHP file map');
        }

        return moduleFactory;
    },

    /**
     * Initializes the FileSystem with a fetcher function that will return
     * the wrapper factory function for compiled PHP modules
     *
     * @param {Function} phpModuleFactoryFetcher
     */
    init: function (phpModuleFactoryFetcher) {
        this.phpModuleFactoryFetcher = phpModuleFactoryFetcher;
    },

    /**
     * Determines whether the specified directory path exists in the FileSystem.
     * Currently always returns true, as we cannot be sure from the info we have
     *
     * @returns {boolean}
     */
    isDirectory: function () {
        // TODO: Implement once we have support for non-PHP files in the VFS
        return true;
    },

    /**
     * Determines whether the specified file exists in the FileSystem.
     * Currently only compiled PHP modules can be in the FileSystem, so only those
     * may be detected.
     *
     * @param {string} filePath
     * @returns {boolean}
     */
    isFile: function (filePath) {
        var fileSystem = this;

        filePath = fileSystem.realPath(filePath);

        return fileSystem.phpModuleFactoryFetcher(filePath, true);
    },

    /**
     * Converts the specified module path to a full one,
     * normalizing any parent- or current-directory symbols
     *
     * @param {string} filePath
     * @returns {string}
     */
    realPath: function (filePath) {
        filePath = path.normalize(filePath);

        return filePath;
    }
});

module.exports = FileSystem;
